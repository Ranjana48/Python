Django History
===================================================================================
==> Created in 2003 by Adrian Holovaty and Simon Willison.
==> Developed at the Lawrence Journal-World newspaper in Lawrence, Kansas.
==> Built to manage news-oriented websites quickly and efficiently.
==> Named after Django Reinhardt, a famous gypsy jazz guitarist.
==> The creators were fans of his music.
==> Released to the public in July 2005 
==> Actively maintained by the Django Software Foundation (DSF).
==> Large and active community with thousands of contributors.
==> Used by companies like Instagram, Pinterest, Mozilla, and Disqus.
==> Current Version of Django is 5.x
===================================================================================
Django Features
===================================================================================
1. MVC Pattern (MVT in Django)
2. Built-in Admin Interface
3. ORM (Object-Relational Mapper)
4. Security
5. Scalability
6. Rapid Development
7. Versatile Templating Engine
8. Form Handling
9. URL Routing System
10. Authentication and Authorization
11. Middleware Support
12. Internationalization (i18n)
13. Reusable Apps
14. Development Tools
15. Extensive Documentation
=====================================================================================


1. MVC Pattern (MVT in Django)
Django follows the Model-View-Template (MVT) pattern.

Separates business logic (Model), user interface (Template), and control flow (View).

MVT, which stands for Model-View-Template, is an architectural pattern used in Django, a Python web framework. It's a variation of the more commonly known MVC (Model-View-Controller) pattern. MVT divides the application into three interconnected components: 


Model:
Represents the data structure of the application. It interacts with the database, defining how data is stored and accessed. It is typically a Python class that maps to a database table.

View:
Contains the business logic of the application. It processes incoming requests, interacts with the model to fetch or manipulate data, and prepares the data to be passed to the template. 

Template:
Handles the presentation logic of the application. It is an HTML file that contains embedded Python code using Django's template language (DTL).


2. Built-in Admin Interface
Auto-generated admin panel to manage data and users.
It is inbuilt application which comes with django project.
This interface or application is used for managing,
1. users
2. database
3. roles



3. ORM (Object-Relational Mapper)
Interact with databases using Python code instead of SQL.
Interacting with database using object oriented programming (classes and objects)
Supports multiple databases: PostgreSQL, MySQL, SQLite, Oracle, etc.


4. Security
Built-in protection against:
SQL Injection
Cross-Site Scripting (XSS)
Cross-Site Request Forgery (CSRF)
Clickjacking
Password hashing and authentication


5. Scalability
Scalable to handle high traffic and large data volumes.
Used by large websites like Instagram, Pinterest, and Disqus.


6. Rapid Development
Comes with everything needed to build a web app quickly: ORM, forms, authentication, admin, etc.



7. Versatile Templating Engine
Use Django Template Language (DTL) to create dynamic HTML.

Supports inheritance, logic, loops, etc. inside templates.


8. Form Handling
Easy form creation and validation.
CSRF protection included.
ModelForm simplifies form creation based on models.



9. URL Routing System
Clean and readable URLs.

Supports dynamic routing using path converters and regex.

10. Authentication and Authorization
User authentication system built-in.

Permissions and groups for access control.
Password reset and login/logout views available.

11. Middleware Support
Middleware processes request and response objects globally.

Useful for sessions, authentication, security, etc.

12. Internationalization (i18n)
Supports localization and translation of content.

Useful for multilingual websites.

13. Reusable Apps
Apps can be packaged and reused across multiple projects.

Encourages modular and maintainable design.

14. Development Tools
runserver for local testing
shell for debugging
makemigrations and migrate for database handling

15. Extensive Documentation
One of the best-documented frameworks.
Huge community, plenty of tutorials and third-party packages.